import logging
import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from environs import Env
from BotData.database_function import add_user, get_users_by_gender, user_exists, add_like, is_mutual_like, get_user_by_id, create_tables, count_likes, get_likers, delete_user, delete_all_profiles, update_photo_in_db, update_description_in_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    filename='bot.log',
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env
print("–ß—Ç–µ–Ω–∏–µ .env...")
env = Env()
env.read_env()
BOT_TOKEN = env('BOT_TOKEN')
print(f"–¢–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 898352337  # –í–∞—à telegram_id

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∏—Å–∫–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª–∞–π–∫–æ–≤
user_data = {}

# FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class Registration(StatesGroup):
    name = State()
    age = State()
    gender = State()
    university = State()
    description = State()
    photo = State()

# FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ
class EditPhotoState(StatesGroup):
    waiting_for_photo = State()

# FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
class EditDescriptionState(StatesGroup):
    waiting_for_description = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîé –ü–æ–∏—Å–∫ —Å–æ–∂–∏—Ç–µ–ª—è")],
        [KeyboardButton(text="üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")]
    ],
    resize_keyboard=True
)

# –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
edit_profile_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ")],
        [KeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
gender_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∞–π–∫–æ–≤
match_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ù§Ô∏è –õ–∞–π–∫"), KeyboardButton(text="‚ùå –î–∏–∑–ª–∞–π–∫")],
        [KeyboardButton(text="‚õî –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä")]
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(F.text == "/start")
async def start_command(message: types.Message, state: FSMContext):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    if user_exists(message.from_user.id):
        await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(Registration.name)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.message(F.text == "/clear_db")
async def clear_database(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        if delete_all_profiles():
            await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

# –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_my_profile(message: types.Message):
    user = get_user_by_id(message.from_user.id)
    if not user:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return
    try:
        caption = (
            f"üë§ {user[2]}, {user[3]} –ª–µ—Ç\n"
            f"üè´ {user[5]}\n"
            f"üìå {user[6]}"
        )
        await message.answer_photo(user[7], caption=caption, reply_markup=main_menu)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ—Ñ–∏–ª—è {message.from_user.id}: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
@dp.message(Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Registration.age)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
@dp.message(Registration.age)
async def process_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return
    age = int(message.text)
    if not (12 <= age <= 100):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (12-100 –ª–µ—Ç).")
        return
    await state.update_data(age=age)
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=gender_keyboard)
    await state.set_state(Registration.gender)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∞
@dp.message(Registration.gender)
async def process_gender(message: types.Message, state: FSMContext):
    if message.text not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
        return
    await state.update_data(gender=message.text)
    await message.answer("–ì–¥–µ —Ç—ã —É—á–∏—à—å—Å—è?", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Registration.university)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
@dp.message(Registration.university)
async def process_university(message: types.Message, state: FSMContext):
    await state.update_data(university=message.text)
    await message.answer("–î–æ–±–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ.", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Registration.description)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message(Registration.description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–ü—Ä–∏—à–ª–∏ —Å–≤–æ—ë —Ñ–æ—Ç–æ.", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Registration.photo)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@dp.message(Registration.photo)
async def process_photo(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    photo_id = message.photo[-1].file_id
    data = await state.get_data()

    try:
        if add_user(
            telegram_id=message.from_user.id,
            name=data['name'],
            age=data['age'],
            gender=data['gender'],
            university=data['university'],
            description=data['description'],
            photo=photo_id
        ):
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)
        else:
            await message.answer("–û—à–∏–±–∫–∞: –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        await state.clear()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message(F.text == "üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def edit_profile(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=edit_profile_menu)

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(F.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_main(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
@dp.message(F.text == "üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ")
async def prompt_edit_photo(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ.")
    await state.set_state(EditPhotoState.waiting_for_photo)

@dp.message(EditPhotoState.waiting_for_photo, F.content_type == types.ContentType.PHOTO)
async def process_new_photo(message: types.Message, state: FSMContext):
    new_photo_id = message.photo[-1].file_id
    try:
        if update_photo_in_db(message.from_user.id, new_photo_id):
            await message.answer("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=main_menu)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ {message.from_user.id}: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu)
    finally:
        await state.clear()

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
async def prompt_edit_description(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
    await state.set_state(EditDescriptionState.waiting_for_description)

@dp.message(EditDescriptionState.waiting_for_description)
async def process_new_description(message: types.Message, state: FSMContext):
    new_description = message.text
    try:
        if update_description_in_db(message.from_user.id, new_description):
            await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=main_menu)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è {message.from_user.id}: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu)
    finally:
        await state.clear()

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ
@dp.message(F.text == "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ")
async def re_register(message: types.Message, state: FSMContext):
    try:
        if delete_user(message.from_user.id):
            await message.answer("–ê–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
            await state.set_state(Registration.name)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã {message.from_user.id}: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu)

# –ü–æ–∏—Å–∫ —Å–æ–∂–∏—Ç–µ–ª—è
@dp.message(F.text == "üîé –ü–æ–∏—Å–∫ —Å–æ–∂–∏—Ç–µ–ª—è")
async def start_search(message: types.Message):
    user_id = message.from_user.id
    try:
        conn = sqlite3.connect("database.db")
        cursor = conn.cursor()
        cursor.execute("SELECT gender FROM users WHERE telegram_id = ?", (user_id,))
        res = cursor.fetchone()

        if not res:
            await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start.")
            return

        user_gender = res[0]
        candidates = get_users_by_gender(user_gender, user_id)
        conn.close()

        if not candidates:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=main_menu)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞
        user_data[user_id] = {"roommates": candidates, "index": 0, "mode": "search"}
        await message.answer("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫...", reply_markup=match_keyboard)
        await show_profile(message, user_id=user_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞ {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∞–π–∫–Ω—É–≤—à–∏—Ö (—á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É)
@dp.callback_query(F.data == "view_likers")
async def start_view_likers(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        if not user_exists(user_id):
            await callback.message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start.", reply_markup=main_menu)
            await callback.answer()
            return

        likers = get_likers(user_id)
        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –ª–∞–π–∫–µ—Ä—ã –¥–ª—è {user_id}: {len(likers)}")

        if not likers:
            await callback.message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ª–∞–π–∫–Ω—É–ª —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É.", reply_markup=main_menu)
            await callback.answer()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∞–π–∫–æ–≤
        user_data[user_id] = {"roommates": likers, "index": 0, "mode": "likers"}
        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∞–π–∫–æ–≤ –¥–ª—è {user_id}: {user_data[user_id]}")
        
        await callback.message.answer("–°–º–æ—Ç—Ä–∏–º, –∫—Ç–æ —Ç–µ–±—è –ª–∞–π–∫–Ω—É–ª...", reply_markup=match_keyboard)
        await show_profile(callback.message, user_id=user_id)
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª–∞–π–∫–Ω—É–≤—à–∏—Ö {user_id}: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu)
        await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∞–Ω–∫–µ—Ç—ã
async def show_profile(message: types.Message, user_id: int = None):
    user_id = user_id or message.from_user.id
    data = user_data.get(user_id)

    if not data:
        logging.error(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {user_id}. user_data: {user_data}")
        await message.answer("–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.", reply_markup=main_menu)
        return

    index = data["index"]
    if index >= len(data["roommates"]):
        logging.info(f"–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–ª—è {user_id}")
        await message.answer("–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!", reply_markup=main_menu)
        del user_data[user_id]
        return

    roommate = data["roommates"][index]
    user_data[user_id]["index"] += 1

    try:
        caption = f"üë§ {roommate[2]}, {roommate[3]} –ª–µ—Ç\nüè´ {roommate[5]}\nüìå {roommate[6]}"
        if data["mode"] == "likers":
            caption += "\n‚úÖ –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∞–π–∫–Ω—É–ª —Ç–µ–±—è!"
        await message.answer_photo(roommate[7], caption=caption, reply_markup=match_keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–Ω–∫–µ—Ç—ã {roommate[1]} –¥–ª—è {user_id}: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∫–µ—Ç—É. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π.", reply_markup=match_keyboard)
        await show_profile(message, user_id=user_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞
@dp.message(F.text == "‚ù§Ô∏è –õ–∞–π–∫")
async def like_profile(message: types.Message):
    user_id = message.from_user.id
    data = user_data.get(user_id)
    if not data:
        await message.answer("–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.", reply_markup=main_menu)
        return

    index = data["index"] - 1
    if index < 0 or index >= len(data["roommates"]):
        await message.answer("–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!", reply_markup=main_menu)
        del user_data[user_id]
        return

    roommate = data["roommates"][index]
    liked_user_id = roommate[1]

    try:
        add_like(user_id, liked_user_id)
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ª–∞–π–∫ –æ—Ç {user_id} –∫ {liked_user_id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º –ª–∞–π–∫–µ
        try:
            total_likes = count_likes(liked_user_id)
            notification_text = f"‚ù§Ô∏è –í–∞–º –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫! –í—Å–µ–≥–æ —É –≤–∞—Å {total_likes} –ª–∞–π–∫(–æ–≤)."
            inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª", callback_data="view_likers")]
            ])
            await bot.send_message(chat_id=liked_user_id, text=notification_text, reply_markup=inline_keyboard)
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {liked_user_id}")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {liked_user_id}: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
        mutual_like = is_mutual_like(user_id, liked_user_id)
        logging.info(f"–í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ –º–µ–∂–¥—É {user_id} –∏ {liked_user_id}: {mutual_like}")
        if mutual_like:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ê (—Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
            matched_user = get_user_by_id(liked_user_id)
            if not matched_user:
                logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {liked_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=match_keyboard)
                await show_profile(message, user_id=user_id)
                return

            try:
                chat = await bot.get_chat(liked_user_id)
                username_info = f"@{chat.username}" if chat.username else "–Æ–∑–µ—Ä–Ω–µ–π–º –Ω–µ —É–∫–∞–∑–∞–Ω"
                caption = (
                    f"üéâ –£ –≤–∞—Å –º–µ—Ç—á!\n"
                    f"üë§ {matched_user[2]}, {matched_user[3]} –ª–µ—Ç\n"
                    f"üè´ {matched_user[5]}\n"
                    f"üìå {matched_user[6]}\n"
                    f"üîñ –Æ–∑–µ—Ä–Ω–µ–π–º: {username_info}"
                )
                await message.answer_photo(matched_user[7], caption=caption)
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞ {liked_user_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∏–∑-–∑–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã {liked_user_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ë
            current_user = get_user_by_id(user_id)
            if not current_user:
                logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=match_keyboard)
                await show_profile(message, user_id=user_id)
                return

            try:
                chat_current = await bot.get_chat(user_id)
                username_info_current = f"@{chat_current.username}" if chat_current.username else "–Æ–∑–µ—Ä–Ω–µ–π–º –Ω–µ —É–∫–∞–∑–∞–Ω"
                caption_current = (
                    f"üéâ –£ –≤–∞—Å –º–µ—Ç—á!\n"
                    f"üë§ {current_user[2]}, {current_user[3]} –ª–µ—Ç\n"
                    f"üè´ {current_user[5]}\n"
                    f"üìå {current_user[6]}\n"
                    f"üîñ –Æ–∑–µ—Ä–Ω–µ–π–º: {username_info_current}"
                )
                await bot.send_photo(
                    chat_id=liked_user_id,
                    photo=current_user[7],
                    caption=caption_current
                )
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞ {user_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {liked_user_id} –∏–∑-–∑–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã {user_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {liked_user_id}: {e}")

        await show_profile(message, user_id=user_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞ {user_id} -> {liked_user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=match_keyboard)
        await show_profile(message, user_id=user_id)
        
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∑–ª–∞–π–∫–∞
@dp.message(F.text == "‚ùå –î–∏–∑–ª–∞–π–∫")
async def dislike_profile(message: types.Message):
    user_id = message.from_user.id
    try:
        await show_profile(message, user_id=user_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∑–ª–∞–π–∫–∞ {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu)

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä
@dp.message(F.text == "‚õî –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä")
async def stop_view(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_data:
        del user_data[user_id]
        await message.answer("–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=main_menu)
    else:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä.", reply_markup=main_menu)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        create_tables()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        print("–ó–∞–ø—É—Å–∫ polling...")
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    try:
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        asyncio.run(main())
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
